All





prime




package primeoperations;

import java.util.Scanner;

public class Prime {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (isPrime(number)) {
            System.out.println(number + " is a prime number.");
        } else {
            System.out.println(number + " is not a prime number.");
        }

        scanner.close();
    }

    // Function to check whether a number is prime
    private static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }

        for (int i = 2; i < num; i++) {
            if (num % i == 0) {
                return false; // If the number is divisible by any other number, it's not prime
            }
        }

        return true; // If no divisor is found, the number is prime
    }
}






prime pair





package primeoperations;

import java.util.Scanner;

public class PrimePair{
    public static int Iterations = 0;
    public static void main(String [] args){
        int upperBound;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number till where the pairs should be displayed : ");
        upperBound = sc.nextInt();
        int counter = 1;
        if (upperBound >1){
            System.out.print("2,3   ");
            for (int i = 1; i <= upperBound ; i++) {
                if (isPrime(i) && isPrime(i+2)){
                    System.out.print(i+","+(i+2)+"    ");
                    counter++;
                    if (counter % 5 ==0){
                        System.out.println("\n");
                    }
                }

            }
            
        }
        else {
            System.out.println("No pairs found!");
        }

    }
    public static boolean isPrime(int number){
        boolean prime = false;
        if (number == 1){
            prime = false;
            return prime;
        }
        else if (number == 2){
            prime = true;
            return prime;
        }
        if ( number % 2 == 0){
            prime = false;
            return prime;
        }

        else {
            if (number == 3){
                prime = true;
                Iterations++;
                return prime;
            }
            else {
                for (int i =  3; i <= Math.ceil(Math.sqrt(number)); i+=2) {
                    if (number % i == 0){
                        prime = false;
                        Iterations++;
                        break;
                    }
                    else {
                        prime = true;
                    }
                    Iterations++;
                }
            }
        }
        return prime;
    }
}


























2









Main




package complexops;
import java.util.Scanner;

public class Main
{
    public static void main(String[] args)
    {
        double real1, img1, real2, img2;

        Scanner input = new Scanner(System.in);

        System.out.println("First complex number");

        System.out.println("Enter real part of the complex number");

        real1 = input.nextDouble();

        System.out.println("Enter imaginary part of the complex number ");

        img1 = input.nextDouble();

        Complex obj1 = new Complex(real1, img1);

        System.out.println("Second complex number");

        System.out.println("Enter real part of the complex number");

        real2 = input.nextDouble();

        System.out.println("Enter imaginary part of the complex number ");

        img2 = input.nextDouble();

        Complex obj2 = new Complex(real2, img2);

        Complex obj3 = new Complex();

        int choice;

        System.out.println("Enter:-");

        System.out.println(" 1.Addition\n 2.Subtraction\n 3.Multiplication\n 4.Division");

        choice = input.nextInt();

        switch (choice)
        {
            case 1:
                obj3.add(obj1, obj2);
                break;
            case 2:
                obj3.subtraction(obj1, obj2);
                break;
            case 3:
                obj3.multiplication(obj1, obj2);
                break;
            case 4:
                obj3.division(obj1, obj2);
                break;
            default:
                System.out.println("Please choice valid operation");
        }
    }

}






Complex.Java







package complexops;

class Complex
{
    private double real, img;

    public Complex() {
        real = 0;
        img = 0;
    }

    public Complex(double r, double i)
    {
        real = r;
        img = i;
    }

    public void add(Complex x, Complex y)
    {
        real = x.real + y.real;
        img = x.img + y.img;
        System.out.println("Additions of to complex number is  " + real + " + " + img + " i");
    }

    public void subtraction(Complex x, Complex y)
    {
        real = x.real - y.real;
        img = x.img - y.img;
        System.out.println("Subtraction of to complex number is  " + real + " + " + img + " i");
    }

    public void multiplication(Complex x, Complex y)
    {
        real = (x.real * y.real) - (x.img * y.img);
        img = (x.real * y.img) + (x.img * y.real);
        System.out.println("Multiplication of two complex number is " + real + " + " + img + " i");
    }

    public void division(Complex x, Complex y)
    {
        real = ((x.real * y.real) + (x.img * y.img)) / ((y.real * y.real) + (y.img * y.img));
        img = ((x.img * y.real) - (x.real * y.img)) / ((y.real * y.real) + (y.img * y.img));
        System.out.println("Division of two complex number is " + real + " + " + img + " i");
    }
}






3















Main.java




import java.util.Scanner;

public class Main {

    public static void main(String [] args){
        Bag[] bags = new Bag[30];
        int input = -1;
        while (input != 0){
            input = runApp(bags);
        }
    }

    public static int runApp(Bag[] bags){
        int input;
        Scanner sc = new Scanner(System.in);
        System.out.println("================ MENU ===============");
        System.out.println("\n1. Add\n");
        System.out.println("2. Display\n");
        System.out.println("3. Delete\n");

        input = sc.nextInt();
        switch (input){
            case 0:
                break;
            case 1:
                int input2;
                System.out.println("\n1. Enter Color and Weight\n");
                System.out.println("2. Enter Color and use default Weight\n");
                System.out.println("3. Enter Weight and use default Color\n");
                System.out.println("4. Use default Color and Weight\n");
                input2 = sc.nextInt();
                System.out.println("-------------------------------------");
                switch (input2){
                    case 1 :
                        double weight;
                        String color;
                        System.out.print("Color : ");
                        color = sc.next();
                        System.out.print("Weight : ");
                        weight = sc.nextDouble();
                        bags[Bag.getTotalObjects()] = new Bag(color,weight);
                        break;
                    case 2:
                        System.out.print("Color : ");
                        color = sc.next();
                        bags[Bag.getTotalObjects()] = new Bag(color);
                        break;
                    case 3 :
                        System.out.print("Weight : ");
                        weight = sc.nextDouble();
                        bags[Bag.getTotalObjects()] = new Bag(weight);
                        break;
                    case 4:
                        bags[Bag.getTotalObjects()] = new Bag();
                        break;
                }
                break;
            case 2:
                display(bags);
                break;
            case 3:
                delete(bags);
                break;
        }
        return input;
    }

    public static void display(Bag[] bags){
        System.out.println("-------------------------------------");
        System.out.println("Serial Number       Color      Weight");

        for (int i = 0; i < Bag.getTotalObjects(); i++) {
            if (bags[i] != null){
                System.out.println("-------------------------------------");
                System.out.print((i+1)+"        ");
                bags[i].display();
            }
        }
        System.out.println("-------------------------------------");
        System.out.println("=============== Total ================");
        System.out.println("Items                     Total Weight");
        System.out.println(Bag.getTotalObjects()+"\t\t\t\t\t\t\t\t"+Bag.getTotalWeight());


        System.out.println("\n");
    }

    public static void delete(Bag bags[]){
        int index;
        Scanner sc = new Scanner(System.in);
        index = sc.nextInt();
        bags[index - 1 ].loseWeight();
        for (int i = index-1; i < Bag.getTotalObjects(); i++) {
            if ((i+1) < Bag.getTotalObjects() ){
                bags[i] = bags[i+1];
            }

        }
        bags[bags.length -1] = null;

    }

}





Bag.java





public class Bag {

    private String color;
    private double weight;
    private static double totalWeight;
    private static int totalObjects;

    Bag(String color, double weight){
        this.color = color;
        this.weight = weight;
        totalWeight += this.weight;
        totalObjects++;
    }

    Bag(String color){
        this.color = color;
        this.weight = 25;
        totalWeight += this.weight;
        totalObjects++;
    }

    Bag(double weight){
        this.color = "Red";
        this.weight = weight;
        totalWeight += this.weight;
        totalObjects++;
    }

    Bag(){
        color = "Red";
        weight = 25;
        totalWeight += this.weight;
        totalObjects++;
    }

    void display(){
        System.out.println("\t\t\t"+color+(this.color.length() <= 3? "\t":"")+"\t\t"+weight);
    }

    public static int getTotalObjects(){
        return totalObjects;
    }
    public static double getTotalWeight(){
        return totalWeight;
    }
    public void loseWeight(){
        totalWeight -= this.weight;
        totalObjects--;
    }


}




















4
Distance

#include <iostream>
#include <cmath>
using namespace std;
class feet_inch;
class meter_centimeter{
    int meter, centimeter;
public:
    meter_centimeter(int meter, int centimeter){
        this->meter=meter;
        this->centimeter=centimeter;
    }
    void display();
    friend meter_centimeter add(meter_centimeter x, feet_inch y);
    friend feet_inch add (feet_inch x, meter_centimeter y);
    friend meter_centimeter sub(meter_centimeter x, feet_inch y);
    friend feet_inch sub (feet_inch x, meter_centimeter y);
};

class feet_inch{
    int feet, inch;
public:
    feet_inch(int feet,int inch){
        this->feet=feet;
        this->inch=inch;
    }
    void display();
    friend feet_inch add (feet_inch x, meter_centimeter y);
    friend meter_centimeter add(meter_centimeter x, feet_inch y);
    friend feet_inch sub (feet_inch x, meter_centimeter y);
    friend meter_centimeter sub(meter_centimeter x, feet_inch y);
};

meter_centimeter add(meter_centimeter x, feet_inch y){
    meter_centimeter temp(0,0);
    temp.centimeter=x.centimeter+(x.meter*100)+(y.feet*30.48)+(y.inch*2.54);
    if (temp.centimeter<0){
        temp.centimeter=-temp.centimeter;
    }
    temp.meter=0;
    return temp;
}

feet_inch add(feet_inch x, meter_centimeter y){
    feet_inch temp(0,0);
    temp.inch=x.inch+(x.feet*12)+(y.meter*39.3701)+(y.centimeter*0.393701);
    if (temp.inch<0){
        temp.inch=-temp.inch;
    }
    temp.feet=0;
    return temp;
}

meter_centimeter sub(meter_centimeter x, feet_inch y){
meter_centimeter temp(0,0);
    temp.centimeter=x.centimeter+(x.meter*100)-(y.feet*30.48)-(y.inch*2.54);
    if (temp.centimeter<0){
        temp.centimeter=-temp.centimeter;
    }
temp.meter=0;
return temp;
}

feet_inch sub(feet_inch x, meter_centimeter y){
feet_inch temp(0,0);
    temp.inch=x.inch+(x.feet*12)-(y.meter*39.3701)-(y.centimeter*0.393701);
    if (temp.inch<0){
        temp.inch=-temp.inch;
    }
temp.feet=0;
return temp;
}

void meter_centimeter::display() {
    if (centimeter>=100){
        meter+=floor((centimeter/100));
        centimeter= (centimeter%100);
    }
    cout<<meter<<" m & "<<centimeter<<" cm"<<endl;
}



void feet_inch::display() {
    if (inch>=12){
        feet+=floor((inch/12));
        inch= (inch%12);
    }
    cout<<feet<<" Ft & "<<inch<<" in"<<endl;
}




int main() {
    int m, cm, f, i;
    cout << "Enter the value in Meter: ";
    cin >> m;
    cout << "Enter the value in Centimeter: ";
    cin >> cm;
    cout << "Enter the value in Feet: ";
    cin >> f;
    cout << "Enter the value in Inch: ";
    cin >> i;
    meter_centimeter m1(m, cm);
    meter_centimeter m2(0, 0);
    meter_centimeter m3(0, 0);
    feet_inch f1(f, i);
    feet_inch f2(0, 0);
    feet_inch f3(0, 0);
    m1.display();
    f1.display();
    int ch, ch1, ch2;
    char ch3 = 1;
    do {
        cout << "Enter your Choice:" << endl;
        cout << "1.Addition" << endl;
        cout << "2.Subtraction" << endl;
        cout << "3.Exit" << endl;
        cout << "Choice: ";
        cin >> ch;
        switch (ch) {
                case 1: {
                    cout << "Addition." << endl;
                    cout << "Enter your Choice:" << endl;
                    cout << "1.Display result in Meter-Centimeter" << endl;
                    cout << "2.Display result in Feet-Inch" << endl;
                    cout << "Choice: ";
                    cin >> ch1;
                    if (ch1 == 1) {
                        cout << "Displaying result in Meter-Centimeter." << endl;
                        m2 = add(m1, f1);
                        m2.display();
                        break;
                    } else if (ch1 == 2) {
                        cout << "Displaying result in Feet-Inch." << endl;
                        f2 = add(f1, m1);
                        f2.display();
                        break;
                    } else {
                        cout << "As invalid choice" << endl;
                        cout << "Displaying result in both Meter-Centimeter & Feet-Inch." << endl;
                        m2 = add(m1, f1);
                        f2 = add(f1, m1);
                        m2.display();
                        f2.display();
                        break;
                    }
                }
                case 2: {
                    cout << "Subtraction." << endl;
                    cout << "Enter your Choice:" << endl;
                    cout << "1.Display result in Meter-Centimeter" << endl;
                    cout << "2.Display result in Feet-Inch" << endl;
                    cout << "Choice: ";
                    cin >> ch2;
                    if (ch2 == 1) {
                        cout << "Displaying result in Meter-Centimeter." << endl;
                        m3 = sub(m1, f1);
                        m3.display();
                        break;
                    } else if (ch2 == 2) {
                        cout << "Displaying result in Feet-Inch." << endl;
                        f3 = sub(f1, m1);
                        f3.display();
                        break;
                    } else {
                        cout << "As invalid choice" << endl;
                        cout << "Displaying result in both Meter-Centimeter & Feet-Inch." << endl;
                        m3 = sub(m1, f1);
                        f3 = sub(f1, m1);
                        m3.display();
                        f3.display();
                        break;
                    }

                }
                case 3: {
                    break;
                }
        }
    } while (ch==1||ch==2);
}













5
Main.java




package Inheritance;

public class Main {
    public static void main(String[] args) {
        Professor p = new Professor("Aditya","x","DSW1y233","9549040310","adi@gmail.com",19,"03/05/2003",75000,"Information Technology");
        p.generatePaySlip();
        AssociateProfessor associateProfessor = new AssociateProfessor("Adi","v","DSW1233","9549040310","adityasanjive@gmail.com",19,"23/04/2003",75000,"Information Technology");
        associateProfessor.generatePaySlip();
        AssistantProfessor assistantProfessor = new AssistantProfessor("Raj","e","DSW1233","9549040310","sunandanphalke@gmail.com",19,"23/04/2003",75000,"Information Technology");
        assistantProfessor.generatePaySlip();
    }
}




Person




package Inheritance;
public class Person {
    protected String name;
    protected String employeeId;
    protected String PAN;
    protected String mobile;
    protected String email;
    protected int age;
    protected String DOB;

    public Person(String name, String employeeId, String PAN, String mobile, String email, int age, String DOB) {
        this.name = name;
        this.employeeId = employeeId;
        this.PAN = PAN;
        this.mobile = mobile;
        this.email = email;
        this.age = age;
        this.DOB = DOB;
    }

    public void displayData(){
        System.out.println("Name : "+name+"\t DOB : "+DOB);
        System.out.println("Age : "+age);
        System.out.println("Employee Id : "+employeeId+"\t PAN : "+PAN);
        System.out.println("Mobile Number : "+mobile);
    }
}








Professor



package Inheritance;
public class Professor extends Person{
    private double basicPay;
    private String department;

    public Professor(String name, String employeeId, String PAN, String mobile, String email, int age, String DOB, double basicPay, String department) {
        super(name, employeeId, PAN, mobile, email, age, DOB);
        this.basicPay = basicPay;
        this.department = department;
    }

    void generatePaySlip(){
        displayData();
        double DA = 1.19*basicPay, HRA = 0.3*basicPay, PF = 0.12*basicPay, SCF = 0.1*basicPay;
        System.out.println("Department : "+department+"\t Designation : "+((((this.getClass()).toString()).substring(6))));
        System.out.println("Basic Pay : "+basicPay);
        System.out.println("-----------------------------------");

        System.out.println("Additives : ");
        System.out.println("-----------------------------------");
        System.out.println("Dearness Allowance : "+DA);
        System.out.println("House Rental Allowance :"+ HRA);
        double gross = DA+HRA+basicPay;
        System.out.println("-----------------------------------");
        System.out.println("Gross Salary : "+gross);
        System.out.println("-----------------------------------");

        System.out.println("Deductions : ");
        System.out.println("Provident fund : "+ PF);
        System.out.println("Staff club fund : "+ SCF);
        double net = gross - PF - SCF;
        System.out.println("-----------------------------------");
        System.out.println("Net Salary : "+net);
        System.out.println("-----------------------------------");


    }
}






AssociatePro



package Inheritance;

public class AssociateProfessor extends Person {
    private double basicPay;
    private String department;

    public AssociateProfessor(String name, String employeeId, String PAN, String mobile, String email, int age, String DOB, double basicPay, String department) {
        super(name, employeeId, PAN, mobile, email, age, DOB);
        this.basicPay = basicPay;
        this.department = department;
    }

    void generatePaySlip(){
        displayData();
        double DA = 1.19*basicPay, HRA = 0.3*basicPay, PF = 0.12*basicPay, SCF = 0.1*basicPay;
        System.out.println("Department : "+department+"\t Designation : "+((((this.getClass()).toString()).substring(6))));
        System.out.println("Basic Pay : "+basicPay);
        System.out.println("-----------------------------------");

        System.out.println("Additives : ");
        System.out.println("-----------------------------------");
        System.out.println("Dearness Allowance : "+DA);
        System.out.println("House Rental Allowance :"+ HRA);
        double gross = DA+HRA+basicPay;
        System.out.println("-----------------------------------");
        System.out.println("Gross Salary : "+gross);
        System.out.println("-----------------------------------");

        System.out.println("Deductions : ");
        System.out.println("Provident fund : "+ PF);
        System.out.println("Staff club fund : "+ SCF);
        double net = gross - PF - SCF;
        System.out.println("-----------------------------------");
        System.out.println("Net Salary : "+net);
        System.out.println("-----------------------------------");


    }
}







AssistantP



package Inheritance;

public class AssistantProfessor extends Person {
    private double basicPay;
    private String department;

    public AssistantProfessor(String name, String employeeId, String PAN, String mobile, String email, int age, String DOB, double basicPay, String department) {
        super(name, employeeId, PAN, mobile, email, age, DOB);
        this.basicPay = basicPay;
        this.department = department;
    }

    void generatePaySlip(){
        displayData();
        double DA = 1.19*basicPay, HRA = 0.3*basicPay, PF = 0.12*basicPay, SCF = 0.1*basicPay;
        System.out.println("Department : "+department+"\t Designation : "+((((this.getClass()).toString()).substring(6))));
        System.out.println("Basic Pay : "+basicPay);
        System.out.println("-----------------------------------");

        System.out.println("Additives : ");
        System.out.println("-----------------------------------");
        System.out.println("Dearness Allowance : "+DA);
        System.out.println("House Rental Allowance :"+ HRA);
        double gross = DA+HRA+basicPay;
        System.out.println("-----------------------------------");
        System.out.println("Gross Salary : "+gross);
        System.out.println("-----------------------------------");

        System.out.println("Deductions : ");
        System.out.println("Provident fund : "+ PF);
        System.out.println("Staff club fund : "+ SCF);
        double net = gross - PF - SCF;
        System.out.println("-----------------------------------");
        System.out.println("Net Salary : "+net);
        System.out.println("-----------------------------------");


    }
}











6

main




import java.util.Scanner;
import java.util.concurrent.locks.ReadWriteLock;

public class Main {
    static Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) {
        System.out.println(": Area Calculator :");
        Shape shape;
        int input = -1;
        while (input != 0){
            System.out.println("1. Area of Circle");
            System.out.println("2. Area of Triangle");
            System.out.println("3. Area of Rectangle");
            input = scanner.nextInt();
            switch (input){
                case 0:
                    break;
                case 1:
                    shape = new Circle();
                    shape.computeArea();
                    break;
                case 2 :
                    shape = new Triangle();
                    shape.computeArea();
                    break;
                case 3:
                    shape = new Rectangle();
                    shape.computeArea();
                    break;
            }

        }
    }
}




shape




public abstract class Shape {
    protected double x,y;

    abstract void computeArea();

}





circle


import java.util.Scanner;

public class Circle  extends Shape{
    static Scanner sc = new Scanner(System.in);
    @Override
    void computeArea() {
        System.out.println("Area : "+(x*x*Math.PI));
    }
    public Circle(){
        System.out.println("Enter radius : ");
        x = sc.nextDouble();
    }
}






triangle


import java.util.Scanner;

public class Triangle extends Shape {
    static Scanner sc = new Scanner(System.in);
    @Override
    void computeArea() {
        System.out.println("Area : "+(x*y*0.5));
    }
    public Triangle(){
        System.out.println("Enter length of base : ");
        x = sc.nextDouble();
        System.out.println("Enter length of height : ");
        y = sc.nextDouble();
    }
}





rectangle



import java.util.Scanner;

public class Rectangle extends Shape {
    static Scanner sc = new Scanner(System.in);
    @Override
    void computeArea() {
        System.out.println("Area : "+(x*y));
    }
    public Rectangle(){
        System.out.println("Enter length : ");
        x = sc.nextDouble();
        System.out.println("Enter breadth : ");
        y = sc.nextDouble();
    }
}















7


main




package Interface;


public class Main {
    public static void main(String[] args) {
        Vehicle Vehicle = new Car(180,6, "Maruti Suzuki", "S-Cross");
        Vehicle.controlUnit();
        Vehicle = new Cycle(55,5,"Hero","Howler");
        Vehicle.controlUnit();
        Vehicle = new Bike(110,5,"Honda","SP125");
        Vehicle.controlUnit();
    }
}





vehicle



package Interface;

public interface Vehicle {
    public default void changeGear(boolean gearUp){
        if (gearUp){
            System.out.println("Gear is changed to next gear!");
        }
        else {
            System.out.println("Gear is changed to previous gear!");
        }

    }

    public default void speedUp(double increment){
        System.out.println("Speed increased by "+increment);
    }

    public default void applyBrakes(double intensity){
        System.out.println("Speed decresed by "+(intensity * 100)+" %");
    }

    public default int[] speedLimit(int gear){
        int[] speedLimits = {0,0};
        switch (gear){
            case -1:
                System.out.println("Current Speed Limit is : 0 <-> -10");
                speedLimits[0] = 0;
                speedLimits[1] = -10;
                break;
            case 1:
                System.out.println("Current Speed Limit is : 0 <-> 25");
                speedLimits[0] = 0;
                speedLimits[1] = 25;
                break;
            case 2:
                System.out.println("Current Speed Limit is : 25 <-> 55");
                speedLimits[0] = 25;
                speedLimits[1] = 55;
                break;
            case 3:
                System.out.println("Current Speed Limit is : 55 <-> 83");
                speedLimits[0] = 55;
                speedLimits[1] = 83;
                break;
            case 4:
                System.out.println("Current Speed Limit is : 83 <-> 95");
                speedLimits[0] = 83;
                speedLimits[1] = 95;
                break;
            case 5:
                System.out.println("Current Speed Limit is : 95 <-> 110");
                speedLimits[0] = 95;
                speedLimits[1] = 110;
                break;
        }
        return speedLimits;
    }

    void controlUnit();
}






car





package Interface;

import java.util.Scanner;

public class Car implements Vehicle{
    private int maxSpeed;
    private int totalGears;
    private int currentSpeed;
    private int currentGear;
    private String manufacturer;
    private String model;

    public Car(int maxSpeed, int totalGears, String manufacturer, String model) {
        this.maxSpeed = maxSpeed;
        this.totalGears = totalGears;
        this.manufacturer = manufacturer;
        this.model = model;
        currentGear = 0;
        currentSpeed = 0;
    }

    @Override
    public void changeGear(boolean gearUp) {
        //excluding reverse gear
        int gears = totalGears-1;
        if (gearUp){
            if (currentGear+1 > gears){
                System.out.println("Car is on top gear!");
            }
            else {
                currentGear++;
                Vehicle.super.changeGear(gearUp);
            }
        }
        else {
            if (currentGear-1 < -1){
                System.out.println("Car is in reverse!");
            }
            else {
                currentGear--;
                Vehicle.super.changeGear(gearUp);
            }
        }

    }

    public int[] speedLimit(int gear){
        int[] speedLimits = {0,0};
        switch (gear){
            case 0:
                System.out.println("Current Speed Limit is : 0 <-> -10");
                speedLimits[0] = 0;
                speedLimits[1] = -10;
                break;
            case 1:
                System.out.println("Current Speed Limit is : 0 <-> 25");
                speedLimits[0] = 0;
                speedLimits[1] = 25;
                break;
            case 2:
                System.out.println("Current Speed Limit is : 25 <-> 55");
                speedLimits[0] = 25;
                speedLimits[1] = 55;
                break;
            case 3:
                System.out.println("Current Speed Limit is : 55 <-> 83");
                speedLimits[0] = 55;
                speedLimits[1] = 83;
                break;
            case 4:
                System.out.println("Current Speed Limit is : 83 <-> 95");
                speedLimits[0] = 83;
                speedLimits[1] = 95;
                break;
            case 5:
                System.out.println("Current Speed Limit is : 95 <-> 110");
                speedLimits[0] = 95;
                speedLimits[1] = 110;
                break;
        }
        return speedLimits;
    }

    public void speedUp(double increment){
        int[] speedLimits = speedLimit(currentGear);
        if (speedLimits[0] <= currentSpeed+increment){
            if (speedLimits[1] >= currentSpeed+increment){
                currentSpeed += increment;
            }
            else {
                changeGear(true);
                currentSpeed += increment;

            }
        }
        System.out.println("Current speed is : "+currentSpeed);
        System.out.println("Current Gear is : "+currentGear);
    }

    @Override
    public void applyBrakes(double intensity) {
        currentSpeed -= currentSpeed*intensity;
        int[] speedLimits = speedLimit(currentGear);
        if (!(speedLimits[0] <= currentSpeed)){
            changeGear(false);
        }
        System.out.println("Current speed is : "+currentSpeed);
        System.out.println("Current Gear is : "+currentGear);
    }

    public void controlUnit(){
        System.out.println("Welcome to "+manufacturer+" "+model);
        System.out.println("Total Gears : "+totalGears+" and Max speed : " + maxSpeed);
        int input = -1;
        double temp;
        Scanner sc = new Scanner(System.in);
        while (input != 0){
            System.out.println("1. Accelerate");
            System.out.println("2. Break");
            System.out.println("3. Change Gear");
            input = sc.nextInt();
            switch (input){
                case 1:
                    System.out.println("Enter the value by which speed should be increased : ");
                    temp = sc.nextDouble();
                    speedUp(temp);
                    break;
                case 2:
                    System.out.println("Enter the intensity (0.0 to 1.0) by which speed should be decreased : ");
                    temp = sc.nextDouble();
                    applyBrakes(temp);
                    break;
                case 3:
                    System.out.println("Enter the 1 to increment the gear, 0 to decrement : ");
                    temp = sc.nextDouble();
                    if (temp == 0){
                        changeGear(false);
                    }
                    else {
                        changeGear(true);
                    }
                    break;
            }
        }
    }
}






bike



package Interface;

import java.util.Scanner;

public class Bike implements Vehicle{
    private int maxSpeed;
    private int totalGears;
    private int currentSpeed;
    private int currentGear;
    private String manufacturer;
    private String model;

    public Bike(int maxSpeed, int totalGears, String manufacturer, String model) {
        this.maxSpeed = maxSpeed;
        this.totalGears = totalGears;
        this.manufacturer = manufacturer;
        this.model = model;
        currentGear = 0;
        currentSpeed = 0;
    }

    @Override
    public void changeGear(boolean gearUp) {
        //excluding reverse gear
        int gears = totalGears-1;
        if (gearUp){
            if (currentGear+1 > gears){
                System.out.println("Bike is on top gear!");
            }
            else {
                currentGear++;
                Vehicle.super.changeGear(gearUp);
            }
        }
        else {
            if (currentGear-1 < -1){

            }
            else {
                currentGear--;
                Vehicle.super.changeGear(gearUp);
            }
        }

    }

    public int[] speedLimit(int gear){
        int[] speedLimits = {0,0};
        switch (gear){
            case 1:
                System.out.println("Current Speed Limit is : 0 <-> 25");
                speedLimits[0] = 0;
                speedLimits[1] = 25;
                break;
            case 2:
                System.out.println("Current Speed Limit is : 25 <-> 55");
                speedLimits[0] = 25;
                speedLimits[1] = 55;
                break;
            case 3:
                System.out.println("Current Speed Limit is : 55 <-> 65");
                speedLimits[0] = 55;
                speedLimits[1] = 65;
                break;
            case 4:
                System.out.println("Current Speed Limit is : 65 <-> 80");
                speedLimits[0] = 65;
                speedLimits[1] = 80;
                break;
            case 5:
                System.out.println("Current Speed Limit is : 80 <-> 110");
                speedLimits[0] = 80;
                speedLimits[1] = 110;
                break;
        }
        return speedLimits;
    }

    public void speedUp(double increment){
        int[] speedLimits = speedLimit(currentGear);
        if (speedLimits[0] <= currentSpeed+increment){
            if (speedLimits[1] >= currentSpeed+increment){
                currentSpeed += increment;
            }
            else {
                changeGear(true);
                currentSpeed += increment;

            }
        }
        System.out.println("Current speed is : "+currentSpeed);
        System.out.println("Current Gear is : "+currentGear);
    }

    @Override
    public void applyBrakes(double intensity) {
        currentSpeed -= currentSpeed*intensity;
        int[] speedLimits = speedLimit(currentGear);
        if (!(speedLimits[0] <= currentSpeed)){
            changeGear(false);
        }
        System.out.println("Current speed is : "+currentSpeed);
        System.out.println("Current Gear is : "+currentGear);
    }

    public void controlUnit(){
        System.out.println("Welcome to "+manufacturer+" "+model);
        System.out.println("Total Gears : "+totalGears+" and Max speed : " + maxSpeed);
        int input = -1;
        double temp;
        Scanner sc = new Scanner(System.in);
        while (input != 0){
            System.out.println("1. Accelerate");
            System.out.println("2. Break");
            System.out.println("3. Change Gear");
            input = sc.nextInt();
            switch (input){
                case 1:
                    System.out.println("Enter the value by which speed should be increased : ");
                    temp = sc.nextDouble();
                    speedUp(temp);
                    break;
                case 2:
                    System.out.println("Enter the intensity (0.0 to 1.0) by which speed should be decreased : ");
                    temp = sc.nextDouble();
                    applyBrakes(temp);
                    break;
                case 3:
                    System.out.println("Enter the 1 to increment the gear, 0 to decrement : ");
                    temp = sc.nextDouble();
                    if (temp == 0){
                        changeGear(false);
                    }
                    else {
                        changeGear(true);
                    }
                    break;
            }
        }
    }
}







cycle






package Interface;

import java.util.Scanner;

public class Cycle implements Vehicle{
        private int maxSpeed;
        private int totalGears;
        private int currentSpeed;
        private int currentGear;
        private String manufacturer;
        private String model;

        public Cycle(int maxSpeed, int totalGears, String manufacturer, String model) {
            this.maxSpeed = maxSpeed;
            this.totalGears = totalGears;
            this.manufacturer = manufacturer;
            this.model = model;
            currentGear = 0;
            currentSpeed = 0;
        }

        @Override
        public void changeGear(boolean gearUp) {
            //excluding reverse gear
            int gears = totalGears-1;
            if (gearUp){
                if (currentGear+1 > gears){
                    System.out.println("Bicycle is on top gear!");
                }
                else {
                    currentGear++;
                    Vehicle.super.changeGear(gearUp);
                }
            }
            else {
                if (currentGear-1 < -1){

                }
                else {
                    currentGear--;
                    Vehicle.super.changeGear(gearUp);
                }
            }

        }

        public int[] speedLimit(int gear){
            int[] speedLimits = {0,0};
            switch (gear){
                case 1:
                    System.out.println("Current Speed Limit is : 0 <-> 5");
                    speedLimits[0] = 0;
                    speedLimits[1] = 5;
                    break;
                case 2:
                    System.out.println("Current Speed Limit is : 5 <-> 10");
                    speedLimits[0] = 5;
                    speedLimits[1] = 10;
                    break;
                case 3:
                    System.out.println("Current Speed Limit is : 10 <-> 20");
                    speedLimits[0] = 10;
                    speedLimits[1] = 20;
                    break;
                case 4:
                    System.out.println("Current Speed Limit is : 20 <-> 30");
                    speedLimits[0] = 20;
                    speedLimits[1] = 30;
                    break;
                case 5:
                    System.out.println("Current Speed Limit is : 30 <-> 50");
                    speedLimits[0] = 30;
                    speedLimits[1] = 50;
                    break;
            }
            return speedLimits;
        }

        public void speedUp(double increment){
            int[] speedLimits = speedLimit(currentGear);
            if (speedLimits[0] <= currentSpeed+increment){
                if (speedLimits[1] >= currentSpeed+increment){
                    currentSpeed += increment;
                }
                else {
                    changeGear(true);
                    currentSpeed += increment;

                }
            }
            System.out.println("Current speed is : "+currentSpeed);
            System.out.println("Current Gear is : "+currentGear);
        }

        @Override
        public void applyBrakes(double intensity) {
            currentSpeed -= currentSpeed*intensity;
            int[] speedLimits = speedLimit(currentGear);
            if (!(speedLimits[0] <= currentSpeed)){
                changeGear(false);
            }
            System.out.println("Current speed is : "+currentSpeed);
            System.out.println("Current Gear is : "+currentGear);
        }

        public void controlUnit(){
            System.out.println("Welcome to "+manufacturer+" "+model);
            System.out.println("Total Gears : "+totalGears+" and Max speed : " + maxSpeed);
            int input = -1;
            double temp;
            Scanner sc = new Scanner(System.in);
            while (input != 0){
                System.out.println("1. Accelerate");
                System.out.println("2. Break");
                System.out.println("3. Change Gear");
                input = sc.nextInt();
                switch (input){
                    case 1:
                        System.out.println("Enter the value by which speed should be increased : ");
                        temp = sc.nextDouble();
                        speedUp(temp);
                        break;
                    case 2:
                        System.out.println("Enter the intensity (0.0 to 1.0) by which speed should be decreased : ");
                        temp = sc.nextDouble();
                        applyBrakes(temp);
                        break;
                    case 3:
                        System.out.println("Enter the 1 to increment the gear, 0 to decrement : ");
                        temp = sc.nextDouble();
                        if (temp == 0){
                            changeGear(false);
                        }
                        else {
                            changeGear(true);
                        }
                        break;
                }
            }
        }
}










8



main



import java.util.Scanner;

public class main {

	public static void main(String[] args) {
		
		int ch = 0;
		
		exceptionTypes et = new exceptionTypes();
		
		Scanner obj = new Scanner(System.in);
		
	do {
		System.out.println("------ Exception Handling -----");
		System.out.println("1.ArithmeticException");
		System.out.println("2.ArrayIndexOutOfBoundsException");
		System.out.println("3.NullPointerException");
		System.out.println("4.NumberFormatException");
		System.out.println("5.InputMismatchException");
		System.out.println("Enter your choice = ");
		ch = obj.nextInt();
		System.out.println("--------------------------------");
			switch(ch)
			{
				case 1:
					et.arithmetic_exception();
					break;
				case 2:
					et.index_outof_bound();
					break;
				case 3:
					et.null_pointer();
					break;
				case 4:
					et.number_format();
					break;
				case 5:
					et.input_mismatch();
					break;
				case 6:
					System.out.println("Exit");
					break;
			}
		}while(ch!=6);
		
	}

}

/*Output
 ------ Exception Handling -----
1.ArithmeticException
2.ArrayIndexOutOfBoundsException
3.NullPointerException
4.NumberFormatException
5.InputMismatchException        
Enter your choice = 
1
--------------------------------
Enter number 1 = 
2
Enter number 2 = 
0
Arithmetic-Exception found,
You are dividing number by zero
This is 'finally' block
Exception is handeled by catch block
------ Exception Handling -----
1.ArithmeticException
2.ArrayIndexOutOfBoundsException
3.NullPointerException
4.NumberFormatException
5.InputMismatchException
Enter your choice = 
2
--------------------------------
You are trying to accept element index beyond the array size
This is 'finally' block
Exception is handeled by catch block
------ Exception Handling -----
1.ArithmeticException
2.ArrayIndexOutOfBoundsException
3.NullPointerException
4.NumberFormatException
5.InputMismatchException
Enter your choice =
3
--------------------------------
NullPointerException found
There is null value assingned to variable
You can't check it's length of null String
This is 'finally' block
'NullPointerException' is handled by catch block
------ Exception Handling -----
1.ArithmeticException
2.ArrayIndexOutOfBoundsException
3.NullPointerException
4.NumberFormatException
5.InputMismatchException
Enter your choice =
4
--------------------------------
'NumberFormatException' found
You can't convert string yo number
This is 'finally' block
Exception is handled by catch blok
------ Exception Handling -----
1.ArithmeticException
2.ArrayIndexOutOfBoundsException
3.NullPointerException
4.NumberFormatException
5.InputMismatchException
Enter your choice =
5
--------------------------------
Enter any Integer number
xyz
'InputMismatchException' found
Enter integer value only
This is 'finally' block
Exception is handled by catch block
--------------------------------
------ Exception Handling -----
1.ArithmeticException
2.ArrayIndexOutOfBoundsException
3.NullPointerException
4.NumberFormatException
5.InputMismatchException
Enter your choice =
6
--------------------------------
Exit
 */






ExceptionTypes





import java.lang.annotation.AnnotationTypeMismatchException;
import java.util.Scanner;
class exceptionTypes {
		
	void arithmetic_exception()
	{
			Scanner sc = new Scanner(System.in);
			
		try {
			int num1,num2,num3;
			System.out.println("Enter number 1 = ");
			num1=sc.nextInt();
			System.out.println("Enter number 2 = ");
			num2=sc.nextInt();
			num3 = num1 / num2;
			System.out.println("Reasult: "+num3);
		}catch(ArithmeticException e) {
			
			System.out.println("Arithmetic-Exception found,");
			System.out.println("You are dividing number by zero");
		}
		finally
		{
			System.out.println("This is 'finally' block");
			System.out.println("Exception is handeled by catch block");
		}
		
	}
	
	void index_outof_bound()
	{
		try {
			
			int arr[] = new int[5];
			arr[6] = 9;
			
		}catch(ArrayIndexOutOfBoundsException e)
		{
			System.out.println("You are trying to accept element index beyond the array size");
		}
		finally
		{
			System.out.println("This is 'finally' block");
			System.out.println("Exception is handeled by catch block");
		}		
			
	}
	
	void null_pointer()
	{
		String name = null;
	//	int i = 100; 
		try
		{
			System.out.println(name.length());
		}catch(NullPointerException e)
		{
			System.out.println("NullPointerException found");
			System.out.println("There is null value assingned to variable");
			System.out.println("You can't check it's length of null String");
		}
		finally
		{
			System.out.println("This is 'finally' block");
			System.out.println("'NullPointerException' is handled by catch block");
		}
		
	}
	
	void number_format()
	{
		//trying converting string value into numeric value.
		String  str = "Aman";
		try {
			
			int a=Integer.parseInt(str);
			System.out.println(a);
			
		}catch(NumberFormatException e)
		{
			System.out.println("'NumberFormatException' found");
			System.out.println("You can't convert string yo number");
		}
		finally
		{
			System.out.println("This is 'finally' block");
			System.out.println("Exception is handled by catch blok");
		}
	}
	
	void input_mismatch()
	{
		int num4;
		try {
			
			Scanner sc1 = new Scanner(System.in);
			System.out.println("Enter any Integer number");
			num4 = sc1.nextInt();
		}catch(Exception e ) //InputMismatchException e
		{
			System.out.println("'InputMismatchException' found");
			System.out.println("Enter integer value only");
		}
		finally
		{
			System.out.println("This is 'finally' block");
			System.out.println("Exception is handled by catch block");
		}
		
	}
}









9





main


import java.util.Scanner;
public class Main {
	public static void main(String [] args) {
		Container container = new Container();
		runApp(container);
		
	}
	
	static Scanner sc = new Scanner(System.in);
	
	public static void runApp(Container c) {
		int input = -1;
		int ch;
		String s;
		while(input != 0) {
			System.out.println("1. Add");
			System.out.println("2. Remove");
			System.out.println("3. Display");
			System.out.println("4. Check");
			input = sc.nextInt();
			switch(input) {
			case 0:
				break;
			case 1:
				System.out.println("Add a String?");
				System.out.println("1. Yes");
				System.out.println("2. No");
				ch = sc.nextInt();
				if(ch == 1) {
					c.add(true);
				}else {
					c.add(false);
				}
				break;
			case 2:
				System.out.println("Is it a String?");
				System.out.println("1. Yes");
				System.out.println("2. No");
				ch = sc.nextInt();
				if(ch == 1) {
					System.out.println("Enter the String : ");
					s = sc.next();
					c.remove(s);
				}else {
					System.out.println("Enter the Number : ");
					ch = sc.nextInt();
					c.remove(ch);
				}
				break;
			case 3:
				c.display();
				break;
			case 4:
				c.classifyEvenOdd();
				c.classifyPrime();
				c.checkPallindrome();
				break;
			}
		}
	}
	
}




container



import java.util.*;
public class Container {
    private ArrayList<Integer> numList = new ArrayList<>();
    private ArrayList<String> stringList = new ArrayList<>();
    static Scanner sc = new Scanner(System.in);
    
    void add(Boolean string) {
    	if(string) {
        	System.out.println("Enter a string : ");
    		String s = sc.next();
    		stringList.add(s);
    	}else {
    		System.out.println("Enter a number : ");
    		int s = sc.nextInt();
    		numList.add(s);
    	}
    }
    
    void display() {
    	System.out.println(stringList);
    	System.out.println(numList);
    }
    
    void remove(String value) {
    	stringList.remove(value);
    }
    
    void remove(int value) {
    	numList.remove(value);
    }
    
    void classifyEvenOdd(){
        ArrayList<Integer> odd = new ArrayList<>();
        int count = 0;
        System.out.println("Even : ");
        for (int i = 0; i < numList.size(); i++){
            if (numList.get(i) % 2 == 0){
                System.out.println(numList.get(i));
                count++;
            }
            else {
                odd.add(numList.get(i));
            }
        }
        System.out.println("Total Even numbers : "+count);
        System.out.println("Odd :");
        for (int i =0; i < odd.size(); i++ ){
            System.out.println(odd.get(i));
        }
        System.out.println("Total Odd numbers : "+odd.size());

    }
    boolean isPrime(int number){
            boolean prime = false;
            if (number == 1){
                prime = false;
                return prime;
            }
            else if (number == 2){
                prime = true;
                return prime;
            }
            if ( number % 2 == 0){
                prime = false;
                return prime;
            }

            else {
                if (number == 3){
                    prime = true;
                    return prime;
                }
                else {
                for (int i =  3; i <= Math.ceil(Math.sqrt(number)); i+=2) {
                    if (number % i == 0){
                        prime = false;
                        break;
                    }
                    else {
                        prime = true;
                    }
   
                }
            }
            }
            return prime;
        }
    void classifyPrime(){
    	System.out.println("Prime : ");
    	int countP = 0, countNP = 0;
    	ArrayList<Integer> Notprime = new ArrayList<>();
    	for(int i = 0; i < numList.size(); i++ ) {
    		if(!isPrime(numList.get(i))) {
    			Notprime.add(numList.get(i));
    			countNP++;
    		}
    		else {
    			System.out.println(numList.get(i));
    			countP++;
    		}
    	}
    	System.out.println("Total Primes : "+countP);
    	System.out.println("Not Prime : ");
    	for(int i = 0; i < Notprime.size();i++) {
    		System.out.println(Notprime.get(i));
    	}
    	System.out.println("Total Non Primes : "+countP);
    }
    
    String Pallindrome(String s) {
    	StringBuilder s1 = new StringBuilder();
    	s1.append(s);
    	s1.reverse();
    	s = String.valueOf(s1);
    	return s;
    }
    
    void checkPallindrome() {
    	for(int i = 0; i < stringList.size(); i++) {
    		if(stringList.get(i).equals(Pallindrome(stringList.get(i)))) {
    			System.out.println(stringList.get(i)+" is a Pallindrome");
    		}
    		else {
    			System.out.println(stringList.get(i)+" is not a Pallindrome");
    		}
    	}
    }
    
    
}









10

main




public class Main {
    public static void main(String[] args){
        Database db=new Database();
        try {
            db.menu();
        }catch (Exception e){
            System.out.println("An Error Occurred!\nKindly Enter data");
            db.menu();
        }
    }
}



database




import java.io.*;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;

public class Database {
    static Scanner s = new Scanner(System.in);
    static Scanner s1 = new Scanner(System.in);
    static ArrayList<Student> student = new ArrayList<>();
    static File file = new File("Student.txt");
    static ObjectOutputStream oos = null;
    static ObjectInputStream ois = null;

    public void OpenFile() throws Exception {
        ois = new ObjectInputStream(new FileInputStream(file));
        student = (ArrayList<Student>) ois.readObject();
        ois.close();
    }
    public void CloseFile() throws Exception {
        oos = new ObjectOutputStream(new FileOutputStream(file));
        oos.writeObject(student);
        oos.close();
    }

    public void Insert() throws Exception {
        Student s = new Student();
        student.add(s);
        CloseFile();
    }


    public void menu(){
        int choice = 0;
        do {
            System.out.println("Menu: ");
            System.out.println("1.Add Student Data");
            System.out.println("2.Display Student Data");
            System.out.println("3.Modify Student Data");
            System.out.println("4.Delete Student Data");
            System.out.println("5.Clear Student Data");
            System.out.println("6.Search Student Data");
            System.out.println("7.Exit");
            System.out.print("Choice: ");
            choice = s.nextInt();
            switch (choice) {
                case 1:
                    try {
                        Insert();
                    } catch (Exception e) {
                        System.out.println("Error Resolved!");
                        menu();
                    }
                    break;
                case 2:
                    try {
                        display();
                    } catch (Exception e) {
                        System.out.println("Error Resolved!");
                        menu();
                    }
                    break;
                case 3:
                    try {
                        modify();
                    } catch (Exception e) {
                        System.out.println("Error Resolved!");
                        menu();
                    }
                    break;
                case 4:
                    try {
                        delete();
                    } catch (Exception e) {
                        System.out.println("Error Resolved!");
                        menu();
                    }
                    break;
                case 5:
                    try {
                        clear();
                    } catch (Exception e) {
                        System.out.println("Error Resolved!");
                        menu();
                    }
                    break;
                case 6:
                    try {
                        search();
                    } catch (Exception e) {
                        System.out.println("Error Resolved!");
                        menu();
                    }
                    break;
                case 7:
                    choice = 7;
                    break;
                default:
                    System.out.println("Invalid Input!!");
                    break;
            }
        } while (choice != 7);
    }

    private void modify() throws Exception {
        if (file.isFile()) {
            OpenFile();
            boolean found = false;
            System.out.print("Enter Student Id: ");
            String id = s.next();
            System.out.println("-------------------------------------------------------------------------------------------");
            Student temp;
            for (int i = 0; i < student.size(); i++) {
                if (Objects.equals(student.get(i).getId(), id)) {
                    temp = student.get(i);
                    System.out.println(temp.toString());
                    System.out.println("-------------------------------------------------------------------------------------------");
                    reassign(temp);
                    found = true;
                }
            }

            if (found) {
                CloseFile();
                System.out.println("Record Updated Successfully!");
                System.out.println("-------------------------------------------------------------------------------------------");
            } else {
                System.out.println("Record not Found!");
                System.out.println("-------------------------------------------------------------------------------------------");
            }
        } else {
            System.out.println("File does not Exists!");
        }
    }

    private void search() throws Exception {
        if (file.isFile()) {
            OpenFile();
            boolean found = false;
            System.out.print("Enter Student Id: ");
            String id = s.next();
            System.out.println("-------------------------------------------------------------------------------------------");
            Student temp;
            for (int i = 0; i < student.size(); i++) {
                if (Objects.equals(student.get(i).getId(), id)) {
                    temp = student.get(i);
                    System.out.println(temp.toString());
                    found = true;
                    System.out.println("-------------------------------------------------------------------------------------------");
                }

            }
            if (!found) {
                System.out.println("Record not Found!");
                System.out.println("-------------------------------------------------------------------------------------------");

            }
        } else {
            System.out.println("File does not Exists!");
        }
    }

    private void delete() throws Exception {
        if (file.isFile()) {
            OpenFile();
            boolean found = false;
            System.out.print("Enter Student Id: ");
            String id = s.next();
            System.out.println("-------------------------------------------------------------------------------------------");
            Student temp;
            for (int i = 0; i < student.size(); i++) {
                if (Objects.equals(student.get(i).getId(), id)) {
                    temp = student.get(i);
                    student.remove(temp);
                    found = true;
                }
            }

            if (found) {
                CloseFile();
                System.out.println("Record Deleted Successfully!");
                System.out.println("-------------------------------------------------------------------------------------------");
            } else {
                System.out.println("Record not Found!");
                System.out.println("-------------------------------------------------------------------------------------------");
            }
        } else {
            System.out.println("File does not Exists!");
        }
    }

    private void clear() {
        student.clear();
        file.delete();
        file = new File("Student.txt");
        System.out.println("-------------------------------------------------------------------------------------------");
        System.out.println("Data cleared Successfully!");
        System.out.println("-------------------------------------------------------------------------------------------");
    }

    public void display() throws Exception {
        if (file.isFile()) {
            OpenFile();
            System.out.println("-------------------------------------------------------------------------------------------");
            for (int i = 0; i < student.size(); i++) {
                System.out.println(student.get(i).toString());

                System.out.println("-------------------------------------------------------------------------------------------");
            }
        } else {
            System.out.println("File does not Exists!");
        }
    }





    public void reassign(Student temp) {
        int choice = -1;
        do {
            System.out.println("Select Data you want to Change!");
            System.out.println("1.Name");
            System.out.println("2.Student Id");
            System.out.println("3.Address");
            System.out.println("4.Roll no.");
            System.out.println("5.Class");
            System.out.println("6.Marks");
            System.out.println("7.Exit");
            System.out.print("Choice: ");
            choice = s.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("Change the Name.");
                    System.out.print("Enter new Name: ");
                    String tname = s1.nextLine();
                    temp.setName(tname);
                    student.set(student.indexOf(temp), temp);
                    System.out.println("Record Updated Successfully!");
                    System.out.println("-------------------------------------------------------------------------------------------");
                    break;
                case 2:
                    System.out.println("Change the Student Id.");
                    System.out.print("Enter new Student Id: ");
                    String tid = s.next();
                    temp.setId(tid);
                    student.set(student.indexOf(temp), temp);
                    System.out.println("Record Updated Successfully!");
                    System.out.println("-------------------------------------------------------------------------------------------");
                    break;
                case 3:
                    System.out.println("Change the Address.");
                    System.out.print("Enter new Address: ");
                    String taddress = s1.nextLine();
                    temp.setAddress(taddress);
                    student.set(student.indexOf(temp), temp);
                    System.out.println("Record Updated Successfully!");
                    System.out.println("-------------------------------------------------------------------------------------------");
                    break;
                case 4:
                    System.out.println("Change the Roll No.");
                    System.out.print("Enter new Roll No: ");
                    int troll = s.nextInt();
                    temp.setRoll(troll);
                    student.set(student.indexOf(temp), temp);
                    System.out.println("Record Updated Successfully!");
                    System.out.println("-------------------------------------------------------------------------------------------");
                    break;
                case 5:
                    System.out.println("Change the Class.");
                    System.out.print("Enter new Class: ");
                    String tclass = s.next();
                    temp.setStd(tclass);
                    student.set(student.indexOf(temp), temp);
                    System.out.println("Record Updated Successfully!");
                    System.out.println("-------------------------------------------------------------------------------------------");
                    break;
                case 6:
                    System.out.println("Change the Name.");
                    System.out.print("Enter new Name: ");
                    int tmarks = s.nextInt();
                    temp.setMarks(tmarks);
                    student.set(student.indexOf(temp), temp);
                    System.out.println("Record Updated Successfully!");
                    System.out.println("-------------------------------------------------------------------------------------------");
                    break;
                case 7:
                    choice = 7;
                    break;
                default:
                    System.out.println("Enter Valid Input!");
            }


        } while (choice != 7);
    }
}





student





import java.io.Serializable;
import java.util.Scanner;

public class Student implements Serializable {
    private String name,id,address,std;
    private int roll,marks;
    static Scanner s =new Scanner(System.in);
    static Scanner s1=new Scanner(System.in);

    public Student(){
        System.out.print("Enter your Name: ");
        name = s1.nextLine();
        System.out.print("Enter your Student Id: ");
        id = s.next();
        System.out.print("Enter your Address: ");
        address = s1.nextLine();
        System.out.print("Enter your Roll No.: ");
        roll = s.nextInt();
        System.out.print("Enter your Class: ");
        std = s.next();
        System.out.print("Enter your Marks: ");
        marks = s.nextInt();
    }




    public void setName(String name) {
        this.name = name;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setStd(String std) {
        this.std = std;
    }

    public void setRoll(int roll) {
        this.roll = roll;
    }

    public void setMarks(int marks) {
        this.marks = marks;
    }


    public String getId() {
        return id;
    }



    public String toString() {
        return  "Name: " + name + "\nAddress: " + address + "\nRoll No.: " + roll + "\nStudent Id: " + id + "\nClass: " + std + "\nMarks: " + marks;
        }

}











